name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  attestations: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ejlevin1'

    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.SEMANTIC_RELEASE_APP_ID }}
          private_key: ${{ secrets.SEMANTIC_RELEASE_APP_PRIVATE_KEY }}
        continue-on-error: true

      - name: Check token generation
        id: check_token
        run: |
          if [ -z "${{ steps.generate_token.outputs.token }}" ]; then
            echo "::warning::GitHub App token generation failed or secrets not configured. Semantic release will skip git commits."
            echo "has_token=false" >> $GITHUB_OUTPUT
          else
            echo "GitHub App token generated successfully"
            echo "has_token=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release dependencies
        run: |
          npm init -y || true
          npm install --save-dev \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/exec

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: semantic-release-bot
          GIT_AUTHOR_EMAIL: semantic-release-bot@users.noreply.github.com
          GIT_COMMITTER_NAME: semantic-release-bot
          GIT_COMMITTER_EMAIL: semantic-release-bot@users.noreply.github.com
        run: |
          # Use the no-git config if GitHub App token doesn't have bypass permissions
          # This will still create releases and tags, just not commit CHANGELOG.md
          if [ "${{ steps.check_token.outputs.has_token }}" != "true" ]; then
            echo "Using .releaserc-no-git.json configuration (no git commits)"
            npx semantic-release --extends ./.releaserc-no-git.json
          else
            echo "Using standard .releaserc.json configuration (attempting git commits)"
            echo "Note: This will fail if the GitHub App doesn't have branch protection bypass permissions"
            npx semantic-release || {
              echo "::warning::Standard release failed, likely due to branch protection. Retrying without git commits..."
              npx semantic-release --extends ./.releaserc-no-git.json
            }
          fi

      # Docker builds first (as requested)
      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: steps.semantic.outputs.new_release_published == 'true'
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/ejlevin1/caddy-failover
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.semantic.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.semantic.outputs.new_release_version }}
            type=semver,pattern={{major}},value=v${{ steps.semantic.outputs.new_release_version }}
            type=raw,value=latest

      # Build builder stages separately for caching
      - name: Build builder cache stages
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          target: builder
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly

      # Build -loaded variant cache
      - name: Build builder-loaded cache stages
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          target: builder-loaded
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=cacheonly

      - name: Build and push standard Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: standard
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.semantic.outputs.new_release_version }}
            GIT_TAG=v${{ steps.semantic.outputs.new_release_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push -loaded Docker image variant
      - name: Extract Docker metadata for -loaded variant
        if: steps.semantic.outputs.new_release_published == 'true'
        id: docker_meta_loaded
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/ejlevin1/caddy-failover
          tags: |
            type=semver,pattern={{version}}-loaded,value=v${{ steps.semantic.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}}-loaded,value=v${{ steps.semantic.outputs.new_release_version }}
            type=semver,pattern={{major}}-loaded,value=v${{ steps.semantic.outputs.new_release_version }}
            type=raw,value=latest-loaded

      - name: Build and push -loaded Docker image
        if: steps.semantic.outputs.new_release_published == 'true'
        id: docker_build_loaded
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: loaded
          tags: ${{ steps.docker_meta_loaded.outputs.tags }}
          labels: ${{ steps.docker_meta_loaded.outputs.labels }}
          build-args: |
            VERSION=${{ steps.semantic.outputs.new_release_version }}
            GIT_TAG=v${{ steps.semantic.outputs.new_release_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate Docker image attestation (standard)
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/ejlevin1/caddy-failover
          subject-digest: ${{ steps.docker_build.outputs.digest }}
          push-to-registry: true

      - name: Generate Docker image attestation (-loaded)
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/ejlevin1/caddy-failover
          subject-digest: ${{ steps.docker_build_loaded.outputs.digest }}
          push-to-registry: true

      # Now xcaddy builds (after Docker as requested)
      - name: Build Caddy with plugin
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          xcaddy build \
            --with github.com/ejlevin1/caddy-failover=. \
            --output ./caddy

      - name: Create release artifacts
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION=${{ steps.semantic.outputs.new_release_version }}
          mkdir -p dist

          # Linux AMD64
          GOOS=linux GOARCH=amd64 xcaddy build \
            --with github.com/ejlevin1/caddy-failover=. \
            --output ./dist/caddy-linux-amd64
          tar -czf ./dist/caddy-failover-${VERSION}-linux-amd64.tar.gz -C ./dist caddy-linux-amd64

          # Linux ARM64
          GOOS=linux GOARCH=arm64 xcaddy build \
            --with github.com/ejlevin1/caddy-failover=. \
            --output ./dist/caddy-linux-arm64
          tar -czf ./dist/caddy-failover-${VERSION}-linux-arm64.tar.gz -C ./dist caddy-linux-arm64

          # Darwin AMD64
          GOOS=darwin GOARCH=amd64 xcaddy build \
            --with github.com/ejlevin1/caddy-failover=. \
            --output ./dist/caddy-darwin-amd64
          tar -czf ./dist/caddy-failover-${VERSION}-darwin-amd64.tar.gz -C ./dist caddy-darwin-amd64

          # Darwin ARM64
          GOOS=darwin GOARCH=arm64 xcaddy build \
            --with github.com/ejlevin1/caddy-failover=. \
            --output ./dist/caddy-darwin-arm64
          tar -czf ./dist/caddy-failover-${VERSION}-darwin-arm64.tar.gz -C ./dist caddy-darwin-arm64

          # Windows AMD64
          GOOS=windows GOARCH=amd64 xcaddy build \
            --with github.com/ejlevin1/caddy-failover=. \
            --output ./dist/caddy-windows-amd64.exe
          zip -j ./dist/caddy-failover-${VERSION}-windows-amd64.zip ./dist/caddy-windows-amd64.exe

      - name: Upload release artifacts
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.semantic.outputs.new_release_version }}
          files: |
            ./dist/*.tar.gz
            ./dist/*.zip
          token: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
