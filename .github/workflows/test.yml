name: Test Plugin

# Coverage Upload Strategy:
# - PRs: Optional coverage upload in test job (won't fail if rate limited)
# - Main branch: Dedicated coverage-report job handles uploads
# - Requires CODECOV_TOKEN secret to be set in repository settings
# This prevents rate limit issues and duplicate uploads

on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Get dependencies
        run: |
          go mod download
          go mod verify

      - name: Make test script executable
        run: chmod +x ./scripts/test.sh

      - name: Run go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Please run 'gofmt -s -w .' to format your code"
            gofmt -s -d .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run unit tests with coverage
        run: ./scripts/test.sh unit -c -r -n

      - name: Run quick tests
        run: ./scripts/test.sh quick

      # Optional coverage upload for PRs (won't fail if rate limited)
      # Main branch coverage is handled by the dedicated coverage-report job
      - name: Upload coverage to Codecov (PR only)
        if: matrix.go-version == '1.22' && github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false  # Don't fail PRs due to codecov issues
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}  # v4 requires token
        continue-on-error: true  # Continue even if upload fails

  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Make test script executable
        run: chmod +x ./scripts/test.sh

      - name: Run benchmarks
        run: ./scripts/test.sh benchmark

  build-and-validate:
    name: Build and Validate Plugin
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Build Caddy with plugin
        run: |
          xcaddy build \
            --with github.com/ejlevin1/caddy-failover=.

      - name: Test plugin build
        run: |
          ./caddy version
          ./caddy list-modules | grep failover_proxy
          ./caddy list-modules | grep failover_status

      - name: Validate basic Caddyfile
        run: |
          ./caddy validate --config testdata/basic.Caddyfile --adapter caddyfile

      - name: Validate complex Caddyfile
        run: |
          # Set dummy environment variables for complex Caddyfile
          export API_PRIMARY_URL=http://localhost:5031
          export API_SECONDARY_URL=http://localhost:5032
          ./caddy validate --config testdata/complex.Caddyfile --adapter caddyfile


  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: test
    # Only run on pushes to main branch to avoid rate limits
    # This job handles all coverage uploads to Codecov
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Make test script executable
        run: chmod +x ./scripts/test.sh

      - name: Run tests with coverage
        run: ./scripts/test.sh coverage -n

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false  # Don't fail the workflow if codecov has issues
          verbose: true  # Enable verbose output for debugging
          token: ${{ secrets.CODECOV_TOKEN }}  # v4 requires token

  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Make test script executable
        run: chmod +x ./scripts/test.sh

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Run integration tests with verbose output
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          ./scripts/test.sh integration -v
